{
	"info": {
		"_postman_id": "e7020754-58c0-473f-b530-4cd4f75d2d59",
		"name": "Lista API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "39316529"
	},
	"item": [
		{
			"name": "GET",
			"item": [
				{
					"name": "Recuperar um post específico (positivo)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verifica se os tatus code é 200\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Verifica se o id realmente é 1\r",
									"pm.test(\"ID verify\", function(){\r",
									"    pm.expect(pm.response.json().id).to.eql(1);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://jsonplaceholder.typicode.com/posts/1",
							"protocol": "https",
							"host": [
								"jsonplaceholder",
								"typicode",
								"com"
							],
							"path": [
								"posts",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Recuperar todos os posts (positivo)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verifica se o status é 200\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Verifica se o primeiro caso possui todos os campos necessários\r",
									"pm.test(\"First case verify\", function(){\r",
									"    const firstPost = pm.response.json()[0];\r",
									"    pm.expect(firstPost).to.have.property('id');\r",
									"    pm.expect(firstPost).to.have.property('title');\r",
									"    pm.expect(firstPost).to.have.property('body');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://jsonplaceholder.typicode.com/posts",
							"protocol": "https",
							"host": [
								"jsonplaceholder",
								"typicode",
								"com"
							],
							"path": [
								"posts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Recuperar um post com ID inválido (negativo)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verifica se a resposta de erro é 404 not found\r",
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"// Verifica se o corpo da resposta está vazio\r",
									"pm.test(\"Body is empty\", function(){\r",
									"    pm.expect(pm.response.text()).to.eql('{}');\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://jsonplaceholder.typicode.com/posts/abc",
							"protocol": "https",
							"host": [
								"jsonplaceholder",
								"typicode",
								"com"
							],
							"path": [
								"posts",
								"abc"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "POST",
			"item": [
				{
					"name": "Criar um novo post (positivo)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verifica se a resposta do post 201 create\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"// Verifica que a resposta tem um novo id gerado\r",
									"pm.test(\"New ID created\", function(){\r",
									"    pm.expect(pm.response.json()).to.have.property('id');\r",
									"    pm.expect(pm.response.json().id).to.be.a('number');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"title\": \"foo\",\r\n  \"body\": \"bar\",\r\n  \"userId\": 1\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://jsonplaceholder.typicode.com/posts",
							"protocol": "https",
							"host": [
								"jsonplaceholder",
								"typicode",
								"com"
							],
							"path": [
								"posts"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "PUT",
			"item": [
				{
					"name": "Atualizar um post inexistente (negativo)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// 500 porque o jsonplaceholder não tem tratamente adequado\r",
									"pm.test(\"Status code is 500\", function () {\r",
									"    pm.response.to.have.status(500);\r",
									"});\r",
									"// Verifica que a resposta contém uma mensagem de erro\r",
									"pm.test(\"Error response body\", function(){\r",
									"    const responseBody = pm.response.text();\r",
									"    pm.expect(responseBody).to.be.a('string');\r",
									"    pm.expect(responseBody).to.include('TypeError');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": 9999,\r\n  \"title\": \"updated title\",\r\n  \"body\": \"updated body\",\r\n  \"userId\": 1\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://jsonplaceholder.typicode.com/posts/999999",
							"protocol": "https",
							"host": [
								"jsonplaceholder",
								"typicode",
								"com"
							],
							"path": [
								"posts",
								"999999"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "DELETE",
			"item": [
				{
					"name": "Deletar um post (positivo)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"// Verifica se a resposta pro delete é um corpo vazio que é a forma como essa api trata\r",
									"pm.test(\"Empty mensage in body\", function(){\r",
									"    pm.expect(pm.response.text()).to.eql('{}');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "https://jsonplaceholder.typicode.com/posts/1",
							"protocol": "https",
							"host": [
								"jsonplaceholder",
								"typicode",
								"com"
							],
							"path": [
								"posts",
								"1"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}